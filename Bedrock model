var dataArray = [];
function getSelectedRadioButtonValue(radioGroupName) {
  radios = document.getElementsByName(radioGroupName);

  var n = radios.length
  for (var i = 0; i < n; i++) {
    if (radios[i].checked) { return radios[i].value }
  }
}
$(document).ready(function () {
  $(".form-check-input").on("click", function () {
    validateResponse(sessionStorage.getItem("page"));
  })
  $(".form-control").on("change", function () {
    validateResponse(sessionStorage.getItem("page"));
    if ($(this).val() != "") {
      $(this).removeClass("emptyTextField"); $(this).addClass("enteredTextField");
    } else {
      $(this).removeClass("enteredTextField"); $(this).addClass("emptyTextField");
    }
  })
  $(".form-control").on("focus", function () {
    $(this).select();
  });

  // $("#q7text").on("keyup", function () {
  //   $(".charsremaining").text(50 - $(this).val().length + (50 - $(this).val().length == 1 ? " character" : " characters") + " remaining");
  //   sessionStorage.setItem("r33", $("#q7text").val());
  //   validateResponse(7);
  // })
  $("#q8text").on("keyup", function () {
    $(".charsremaining").text(500 - $(this).val().length + (500 - $(this).val().length == 1 ? " character" : " characters") + " remaining");
    // sessionStorage.setItem("r33", $(this).val());
  })
  $("#info").on("click", function () {
    Swal.fire({
      html: '<p><strong>Instructions </strong></p><ul class="text-start"><li>Choose the answer that best represents your opinion.</li><li>Do not use the Back and Forward buttons at the top of your browser window.</li><li>When you&rsquo;re finished, click Submit Survey at the bottom of the final survey page.</li><li>Your responses are confidential. Survey responses go directly to the Alight Solutions research team, who will report only aggregated results back to Marriott.</li></ul>',
      showCloseButton: true,
      showConfirmButton: false
    })
  })
  $("#submit").on("click", function () {
    sessionStorage.setItem("r37", $("#q8text").val());
    storeData();
  })
});


function validateResponse(question) {

  switch (parseInt(question)) {

    case 1:
      if (getSelectedRadioButtonValue("q1") != null) {
        $(".nextbutton").removeClass("disabled");
        sessionStorage.setItem("r1", getSelectedRadioButtonValue("q1"))
      }
      break;


    case 2:
      if (getSelectedRadioButtonValue("q2a") != null && getSelectedRadioButtonValue("q2b") != null) {
        $(".nextbutton").removeClass("disabled");
        sessionStorage.setItem("r2", getSelectedRadioButtonValue("q2a"));
        sessionStorage.setItem("r3", getSelectedRadioButtonValue("q2b"));
      }
      break;

    case 3:
      if (getSelectedRadioButtonValue("q3a") != null && getSelectedRadioButtonValue("q3b") != null && getSelectedRadioButtonValue("q3c") != null && getSelectedRadioButtonValue("q3d") != null && getSelectedRadioButtonValue("q3e") != null && getSelectedRadioButtonValue("q3f") != null) {
        $(".nextbutton").removeClass("disabled");
        sessionStorage.setItem("r4", getSelectedRadioButtonValue("q3a"));
        sessionStorage.setItem("r5", getSelectedRadioButtonValue("q3b"));
        sessionStorage.setItem("r6", getSelectedRadioButtonValue("q3c"));
        sessionStorage.setItem("r7", getSelectedRadioButtonValue("q3d"));
        sessionStorage.setItem("r8", getSelectedRadioButtonValue("q3e"));
        sessionStorage.setItem("r9", getSelectedRadioButtonValue("q3f"));
      }
      break;

    case 4:
      if (getSelectedRadioButtonValue("q4a") != null && getSelectedRadioButtonValue("q4b") != null && getSelectedRadioButtonValue("q4c") != null && getSelectedRadioButtonValue("q4d") != null) {
        $(".nextbutton").removeClass("disabled");
        sessionStorage.setItem("r10", getSelectedRadioButtonValue("q4a"));
        sessionStorage.setItem("r11", getSelectedRadioButtonValue("q4b"));
        sessionStorage.setItem("r12", getSelectedRadioButtonValue("q4c"));
        sessionStorage.setItem("r13", getSelectedRadioButtonValue("q4d"));
      }
      break;

    case 5:
      if (getSelectedRadioButtonValue("q5") != null) {
        $(".nextbutton").removeClass("disabled");
        sessionStorage.setItem("r14", getSelectedRadioButtonValue("q5"));
      }
      break;

    ///////////Orig Case 6 code below///////////

    // case 6:
    //   const inputs = $('.form-control');
    //   const allowedValues = new Set(['','1', '2', '3']);
    //   const numericValues = new Set();
    //   let numericCount = 0; let totalCount = 0;

    //   for (let i = 0; i < inputs.length; i++) {
    //     const value = inputs[i].value.trim();
    //     if (allowedValues.has(value) && value != "") {
    //       numericValues.add(value);
    //       numericCount++;
    //       totalCount++;
    //     } else {
    //       var tmp=value;
    //       inputs[i].value = "";
    //       if(tmp!=""){
    //         console.log("returning false")
    //         //return false;
    //       }
    //     }
    //   }
    //   //console.log(numericCount, numericValues.size, totalCount)
    //   if (numericCount === 3 && numericValues.size === 3 && totalCount === 3) {
    //     $(".nextbutton").removeAttr("disabled").removeClass("disabled");
    //     $("#message").addClass("d-none");
    //     sessionStorage.setItem("r14", inputs[0].value);
    //     sessionStorage.setItem("r15", inputs[1].value);
    //     sessionStorage.setItem("r16", inputs[2].value);
    //     sessionStorage.setItem("r17", inputs[3].value);
    //     sessionStorage.setItem("r18", inputs[4].value);
    //     sessionStorage.setItem("r19", inputs[5].value);
    //     sessionStorage.setItem("r20", inputs[6].value);
    //     sessionStorage.setItem("r21", inputs[7].value);
    //     sessionStorage.setItem("r22", inputs[8].value);
    //     sessionStorage.setItem("r23", inputs[9].value);
    //     return true; // Valid
    //   } else if (numericCount >= 3 || numericValues.size >= 3 || totalCount > 3) {
    //     $("#message").removeClass("d-none");
    //     $(".nextbutton").attr("disabled", true).addClass("disabled");
    //     return false; // Invalid
    //   } else {
    //     //$("#message").removeClass("d-none");
    //     $(".nextbutton").class("disabled", true);
    //   }
    //   break;

    ////////end of Orig case 6 code///////////



    case 6:
      // const inputs6 = $('.form-control'); // select all 10 inputs for this case
      // const allowedValues6 = new Set(['1', '2', '3']);

      // let hasInvalid6 = false;
      // let enteredValues6 = [];

      // // Collect all non-empty input values and check validity
      // inputs6.each(function () {
      //   let val = this.value.trim();
      //   if (val === "") return;

      //   // Invalid if not allowed
      //   if (!allowedValues6.has(val)) {
      //     hasInvalid6 = true;
      //   }

      //   enteredValues6.push(val);
      // });

      // // Check for duplicates in entered values
      // const uniqueValues6 = new Set();
      // for (let val of enteredValues6) {
      //   if (uniqueValues6.has(val)) {
      //     hasInvalid6 = true; // duplicate found
      //   } else {
      //     uniqueValues6.add(val);
      //   }
      // }

      // // Show or hide warning
      // if (hasInvalid6) {
      //   $("#message").removeClass("d-none");
      // } else {
      //   $("#message").addClass("d-none");
      // }

      // // Enable Next button only if exactly 3 unique valid values and no invalids
      // let validUniqueCount6 = enteredValues6.filter(v => allowedValues6.has(v))
      //   .filter((v, i, arr) => arr.indexOf(v) === i).length;

      // if (validUniqueCount6 === 3 && !hasInvalid6) {
      //   $(".nextbutton").removeAttr("disabled").removeClass("disabled");
      // } else {
      //   $(".nextbutton").attr("disabled", true).addClass("disabled");
      // }

      // // Save values in sessionStorage r14 → r23
      // inputs6.each(function (i) {
      //   let val = this.value.trim();
      //   if (!allowedValues6.has(val) || val === "") val = "0";
      //   sessionStorage.setItem("r" + (14 + i), val);
      // });

      // break;


      const inputs6 = $('input[id^="q6_"]').slice(0, 10); // adjust slice if you really have 10 or fewer
      const allowedValues6 = new Set(['1', '2', '3']);

      let hasInvalid6 = false;
      const filledVals = [];

      inputs6.each(function () {
        // prefer unmasked value if using inputmask:
        let raw = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
        raw = (raw || '').toString().trim();

        if (raw === '') return; // skip empties

        if (!allowedValues6.has(raw)) hasInvalid6 = true;
        filledVals.push(raw);
      });

      const uniqueFilled = new Set(filledVals);
      const hasDuplicates = uniqueFilled.size !== filledVals.length;

      // Show/hide message
      if (hasInvalid6 || hasDuplicates) $("#message").removeClass("d-none");
      else $("#message").addClass("d-none");

      const uniqueValidCount = Array.from(uniqueFilled).filter(v => allowedValues6.has(v)).length;

      if (uniqueValidCount === 3 && !hasInvalid6 && !hasDuplicates) {
        $(".nextbutton").removeAttr("disabled").removeClass("disabled");
      } else {
        $(".nextbutton").attr("disabled", true).addClass("disabled");
      }

      // Save (r14 → r23)
      inputs6.each(function (i) {
        let v = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
        v = (v || '').toString().trim();
        if (v === '' || !allowedValues6.has(v)) v = "0";
        sessionStorage.setItem("r" + (15 + i), v);
      });

      // helpful debug log (remove in production)
      console.log('case6 filled:', filledVals, 'uniqueValidCount:', uniqueValidCount, 'invalid:', hasInvalid6, 'duplicates:', hasDuplicates);

      break;

    ///////////Orig Case 7 code below/////////// 
    // case 7:
    //   const inputs2 = $('.form-control');
    //   const allowedValues2 = new Set(['', '1', '2', '3', '4', '5']);
    //   const numericValues2 = new Set();
    //   let numericCount2 = 0; let totalCount2 = 0;

    //   for (let i = 0; i < inputs2.length; i++) {
    //     const value2 = inputs2[i].value.trim();
    //     if (allowedValues2.has(value2) && value2 != "") {
    //       numericValues2.add(value2);
    //       numericCount2++;
    //       totalCount2++;
    //     } else {
    //       var tmp = value2;
    //       inputs2[i].value = "";
    //       //if (value2) { totalCount2++ }
    //       if (tmp != "") {
    //         console.log("returning false")
    //         //return false;
    //       }
    //     }
    //   }
    //   //console.log(numericCount2, numericValues2.size, totalCount2)
    //   //var q7emptyflag = ($("#q7text").val().length == 0) ? 1 : 0;
    //   //var q7enteredflag = ($("#q7text").val().length == 0) ? 0 : 1;
    //   //console.log(numericCount2, numericValues2.size, totalCount2,5-q7enteredflag)
    //   if (numericCount2 === 5 && numericValues2.size === 5 && totalCount2 === 5) {
    //     $(".nextbutton").removeAttr("disabled");
    //     $("#message").addClass("d-none");
    //     sessionStorage.setItem("r21", inputs2[0].value);
    //     sessionStorage.setItem("r22", inputs2[1].value);
    //     sessionStorage.setItem("r23", inputs2[2].value);
    //     sessionStorage.setItem("r24", inputs2[3].value);
    //     sessionStorage.setItem("r25", inputs2[4].value);
    //     sessionStorage.setItem("r26", inputs2[5].value);
    //     sessionStorage.setItem("r27", inputs2[6].value);
    //     sessionStorage.setItem("r28", inputs2[7].value);
    //     sessionStorage.setItem("r29", inputs2[8].value);
    //     sessionStorage.setItem("r30", inputs2[9].value);
    //     sessionStorage.setItem("r31", inputs2[10].value);
    //     sessionStorage.setItem("r32", inputs2[11].value);
    //     return true; // Valid
    //   } else if (numericCount2 >= 5 || numericValues2.size >= 5 || totalCount2 > 5) {
    //     $("#message").removeClass("d-none");
    //     $(".nextbutton").attr("disabled", true);
    //     return false; // Invalid
    //   } else {
    //     //$("#message").removeClass("d-none");
    //     $(".nextbutton").attr("disabled", true);
    //   }
    //   break;
    /////////end of Orig case 7 code///////////
    case 7:
      const inputs7 = $('input[id^="q7_"]');
      const allowedValues7 = new Set(['1', '2', '3', '4', '5']);

      let hasInvalid7 = false;
      const filledVals1 = [];

      inputs7.each(function () {
        // If using Inputmask, get unmasked value; otherwise use .value
        let raw = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
        raw = (raw || '').toString().trim();

        if (raw === '') return; // skip empty inputs

        if (!allowedValues7.has(raw)) hasInvalid7 = true;
        filledVals1.push(raw);
      });

      const uniqueFilled1 = new Set(filledVals1);
      const hasDuplicates1 = uniqueFilled1.size !== filledVals1.length;

      // Show or hide warning
      if (hasInvalid7 || hasDuplicates1) $("#message").removeClass("d-none");
      else $("#message").addClass("d-none");

      // Count unique valid ranks (1..5)
      const uniqueValidCount1 = Array.from(uniqueFilled1).filter(v => allowedValues7.has(v)).length;

      // Enable Next only when exactly 5 unique valid ranks, and no invalids/duplicates
      if (uniqueValidCount1 === 5 && !hasInvalid7 && !hasDuplicates1) {
        $(".nextbutton").removeAttr("disabled").removeClass("disabled");
      } else {
        $(".nextbutton").attr("disabled", true).addClass("disabled");
      }

      // Save values to sessionStorage r25 → r36 (use "0" for empty/invalid)
      inputs7.each(function (i) {
        let v = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
        v = (v || '').toString().trim();
        if (v === '' || !allowedValues7.has(v)) v = "0";
        sessionStorage.setItem("r" + (25 + i), v);
      });

      // Debug log (remove once confirmed)
      console.log('case7 filled:', filledVals1, 'uniqueValidCount:', uniqueValidCount1, 'invalid:', hasInvalid7, 'duplicates:', hasDuplicates1);

      break;

  }

}

function storeData() {
  var str = "";
  for (var i = 1; i <= 37; i++) {
    str += sessionStorage.getItem("r" + i) + (i < 37 ? "," : "");
    dataArray.push(sessionStorage.getItem("r" + i))
  }
  // sessionStorage.setItem("finalData",dataArray)
  //console.log("data",dataArray.toString())
  //console.log("data",dataArray)
  // saveSurvey();
  saveSurveyResponse();
  //location = "finish.html"
}


//Site Timer

var secs = 1200;
var timerID = null;
var timerRunning = false;
var delay = 1000;
var servRenewInterval = 400;

function resetTimer() {
  console.log(secs)
  // Set the length of the timer, in seconds
  secs = 1200
  if (sessionStorage.getItem("timer") == -1) { sessionStorage.setItem("timer", secs) }
  StopTheClock();
  StartTheTimer();
  var currentTime = new Date().getTime();
  sessionStorage.setItem("lastAccessTime", new Date().getTime());
  var lastAccessTime = sessionStorage.getItem("lastAccessTime");
  console.log('lastUpdateInterval Interval:' + currentTime + ":" + lastAccessTime);
  var lastUpdateInterval = (currentTime - lastAccessTime) / 1000;
  //console.log('lastUpdateInterval Interval:' + lastUpdateInterval );
  if (lastUpdateInterval > servRenewInterval) {
    console.log('Extending Session:');
    sessionStorage.setItem("lastServAccessTime", new Date().getTime());

    //extendSession();
    // document.write('<script src="js/sValidator.js"><\/script>');
  }


}

function StopTheClock() {
  if (timerRunning)
    clearTimeout(timerID)
  timerRunning = false
}

function StartTheTimer() {
  if (secs == 0) {
    StopTheClock();
    sessionStorage.clear();
    //location.replace("notAuthorized.html");
  }
  else {
    secs = secs - 1;
    sessionStorage.setItem("timer", secs)
    timerRunning = true;
    timerID = window.setTimeout(StartTheTimer, delay);

  }
}
if (location.href.toLowerCase().indexOf("notAuthorized") < 0) { resetTimer() }
else { sessionStorage.clear() }

//document.addEventListener("mousemove", resetTimer);
document.addEventListener("keydown", resetTimer);
document.addEventListener("click", resetTimer);

