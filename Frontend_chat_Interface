<!DOCTYPE html>
<html>
<head>
    <title>AI Enrollment Chatbot</title>
    
    <style>
        
body {
    font-family: 'Segoe UI', Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100vh;
    display: flex;
    flex-direction: column;
    background: #fff;
}
#chat-container {
    /* flex: 1; */
    max-width: 800px;
    margin: 0 auto;
    width: 100%;
    padding: 0;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
}
#chat-history {
    /* flex: 1; */
    overflow-y: auto;
    padding: 10px;
    background: transparent;
    border-radius: 10px;
    margin-bottom: 25px;
    /* box-shadow: 0 2px 5px rgba(0,0,0,0.1); */
}
.message {
    margin-bottom: 15px;
    display: flex;
}
.user-message {
    justify-content: flex-end;
}
.bot-message {
    justify-content: flex-start;
}
.message-bubble {
    max-width: 100%;
    padding: 12px 14px;
    border-radius: 15px;
    word-break: break-word;
    white-space: pre-wrap;
    font-size: 14px;
}
.user-message .message-bubble {
    background: #007bff;
    color: white;
    border-bottom-right-radius: 5px;
}
.bot-message .message-bubble {
    background: #e9ecef;
    color: #212529;
    border-bottom-left-radius: 5px;
}
#input-container {
    display: inline-flex;
    padding: 2%;
    background: #fff;
    position: fixed;
    bottom: 0;
    width: 96%;
    margin:0;
    
    /* border-radius: 10px;
    box-shadow: 0 -2px 5px rgba(0,0,0,0.05); */
}
#message-input:focus{
    border-color: #007bff;
}
#message-input {
    /* flex: 1; */
    padding: 15px 60px 15px 8px;
    width: 100%;
    border: 2px solid #ababab;
    border-radius: 8px;
    font-size: 14px;
    outline: none;
}
#send-button {
    padding: 2px 15px;
    background: transparent;
    /* color: white; */
    border: none;
    border-radius: 8px;
    cursor: pointer;
    position: absolute;
    right: 0;
    top: 8px;
}
/* #send-button:hover {
    background: #0056b3;
} */
.typing-indicator {
    display: none;
    padding: 10px;
    font-style: italic;
    color: #6c757d;
}
.error-message {
    color: #dc3545;
    padding: 10px;
    text-align: center;
}
.message-bubble ol {
    list-style: none;
    counter-increment: list-counter;
    
    padding-left: 1.5em;
    margin: 8px 0;
}
.message-bubble ol li {
    /* counter-reset: list-counter; */
    margin: 4px 0;
    position: relative;
}
/* .message-bubble ol li::before {
    content: counter(list-counter) ".";
    position: absolute;
    left: -1.5em;
    width: 1.5em;
    text-align: right;
    color: #2ecc71;
    font-weight: bold;
} */
.message-bubble ul {
    list-style: none;
    padding-left: 1.5em;
    margin: 8px 0;
}
.message-bubble li {
    /* counter-reset: list-counter; */
    list-style: disc;
    margin: 4px 0;
    position: relative;
}
.message-bubble ul li::before {
    content: "•";
    color: #3498db;
    margin-right: 8px;
}
.message-bubble p {
    margin: 8px 0;
}
.badge {
background-color: powderblue;
color: #000;
padding: 4px 8px;
text-align: center;
border-radius: 5px;
margin: 5px;
display: inline-block;
}

        .question-tile {
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            font-size: 14px;
            margin: 5px 0;
            cursor: pointer;
            transition: background-color 0.3s, box-shadow 0.3s;
        }
        .suggested_messagep{
            /* background-color: #f0f0f0;
            border: 1px solid #ccc; */
          
            padding: 0px;
            margin: 0;
            font-style: italic;
            font-weight: 500;
            /* cursor: pointer;
            transition: background-color 0.3s, box-shadow 0.3s; */

        }

        .question-tile:hover {
            background-color: #e0e0e0;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .question-tile:active {
            background-color: #d0d0d0;
        }
    </style>
</head>
<body>
    <div id="chat-container">
        <div id="chat-history">
            <!-- Question Tiles will be dynamically added here -->
        </div>
        <!-- <button id="history-button" onclick="showHistory()">Show History</button> -->
    </div>
    <div class="typing-indicator" id="typing-indicator">Bot is typing...</div>
    <div class="error-message" id="error-message"></div>
    <div id="input-container">
        <input type="text" id="message-input" placeholder="Ask your question" onkeypress="handleEnterKey(event)">
        <button id="send-button" onclick="sendMessage()">
            <svg width="40px" height="40px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M7.75778 6.14799C6.84443 5.77187 6.0833 5.45843 5.49196 5.30702C4.91915 5.16036 4.18085 5.07761 3.63766 5.62862C3.09447 6.17962 3.18776 6.91666 3.34259 7.48732C3.50242 8.07644 3.8267 8.83302 4.21583 9.7409L4.86259 11.25H10C10.4142 11.25 10.75 11.5858 10.75 12C10.75 12.4142 10.4142 12.75 10 12.75H4.8626L4.21583 14.2591C3.8267 15.167 3.50242 15.9236 3.34259 16.5127C3.18776 17.0833 3.09447 17.8204 3.63766 18.3714C4.18085 18.9224 4.91915 18.8396 5.49196 18.693C6.0833 18.5416 6.84443 18.2281 7.75777 17.852L19.1997 13.1406C19.4053 13.0561 19.6279 12.9645 19.7941 12.867C19.944 12.779 20.3434 12.5192 20.3434 12C20.3434 11.4808 19.944 11.221 19.7941 11.133C19.6279 11.0355 19.4053 10.9439 19.1997 10.8594L7.75778 6.14799Z" fill="#000000"></path> </g></svg>
        </button>
        
    </div>
    <script>
        // Define userHistory variable
        const userHistory = JSON.parse(sessionStorage.getItem('userHistory')) || [];
    
        window.addEventListener('message', function(event) {
            console.log('Message received from parent:', event.data);
            
            // Extract the data from the event
            const { questions, suggested_message } = event.data;
    
            // Handle the questions as needed
            const chatHistory = document.getElementById('chat-history');
            chatHistory.innerHTML = '';
            const suggested_messagep = document.createElement('div');
            suggested_messagep.className = 'suggested_messagep';
            suggested_messagep.textContent = suggested_message;
            chatHistory.appendChild(suggested_messagep);
    
            questions.forEach(question => {
                const questionTile = document.createElement('div');
                questionTile.className = 'question-tile';
                questionTile.onclick = () => sendQuestion(question);
                questionTile.textContent = question;
                chatHistory.appendChild(questionTile);
            });
    
            // Handle the suggested_message as needed
            console.log('Suggested message:', suggested_message);
            // You can display or use the suggested_message as needed
        });
    
        const API_URL = 'https://0ho0tvkvph.execute-api.us-east-1.amazonaws.com/Dev/chat';
        const chatHistory = document.getElementById('chat-history');
        const messageInput = document.getElementById('message-input');
        const typingIndicator = document.getElementById('typing-indicator');
        const errorMessage = document.getElementById('error-message');
        const storedQuestions = JSON.parse(sessionStorage.getItem('questions')) || [];
        storedQuestions.forEach(question => {
            const questionTile = document.createElement('div');
            questionTile.className = 'question-tile';
            questionTile.onclick = () => sendQuestion(question);
            questionTile.textContent = question;
            chatHistory.appendChild(questionTile);
        });
    
        function handleEnterKey(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }
    
        function formatResponse(text) {
            const wrapper = document.createElement('div');
            const blocks = text.split('\n\n');
            
            blocks.forEach(block => {
                const lines = block.split('\n').filter(l => l.trim() !== '');
                
                // Check for numbered list pattern in the entire block
                if (lines.length > 0 && lines.every(line => /^\s*\d+\.\s/.test(line.trim()))) {
                    const ol = document.createElement('ol');
                    lines.forEach(line => {
                        const li = document.createElement('li');
                        li.textContent = line.replace(/^\s*\d+\.\s*/, '').trim();
                        ol.appendChild(li);
                    });
                    wrapper.appendChild(ol);
                }
                // Check for bulleted list pattern
                else if (lines.length > 0 && lines.every(line => /^\s*[-*•]\s/.test(line.trim()))) {
                    const ul = document.createElement('ul');
                    lines.forEach(line => {
                        const li = document.createElement('li');
                        li.textContent = line.replace(/^\s*[-*•]\s*/, '').trim();
                        ul.appendChild(li);
                    });
                    wrapper.appendChild(ul);
                }
                // Regular text
                else {
                    const p = document.createElement('p');
                    p.textContent = block.trim();
                    wrapper.appendChild(p);
                }
            });
    
            return wrapper.innerHTML;
        }
    
        function appendMessage(message, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
            
            const bubble = document.createElement('div');
            bubble.className = 'message-bubble';
            
            if (isUser) {
                bubble.textContent = message;
            } else {
                typeWordByWord(message, bubble);
            }
            
            messageDiv.appendChild(bubble);
            chatHistory.appendChild(messageDiv);
            
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }
    
        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;
    
            messageInput.value = '';
            errorMessage.textContent = '';
            
            appendMessage(message, true);
            
            typingIndicator.style.display = 'block';
            chatHistory.scrollTop = chatHistory.scrollHeight;
    
            try {
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        prompt: message
                    })
                });
    
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
    
                const data = await response.json();
                appendMessage(data.message, false);
    
                // Save question and response to userHistory
                userHistory.push({ question: message, response: data.message });
                sessionStorage.setItem('userHistory', JSON.stringify(userHistory));
    
            } catch (error) {
                errorMessage.textContent = `Error: ${error.message}`;
            } finally {
                typingIndicator.style.display = 'none';
            }
        }
    
        function sendQuestion(question) {
            messageInput.value = question;
            sendMessage();
        }
    
        function typeWordByWord(response, element) {
            const words = response.split(' ');
            let delay = 0;
    
            words.forEach((word, index) => {
                setTimeout(() => {
                    element.innerHTML += word + ' ';
                }, delay);
                delay += 200; // Adjust the delay as needed (200ms in this case)
            });
        }
    
        function showHistory() {
            const history = JSON.parse(sessionStorage.getItem('userHistory')) || [];
            const chatHistory = document.getElementById('chat-history');
            chatHistory.innerHTML = '';
    
            if (history.length > 0) {
                history.forEach(entry => {
                    const questionDiv = document.createElement('div');
                    questionDiv.className = 'message user-message';
                    questionDiv.textContent = entry.question;
    
                    const responseDiv = document.createElement('div');
                    responseDiv.className = 'message bot-message';
                    responseDiv.innerHTML = formatResponse(entry.response);
    
                    chatHistory.appendChild(questionDiv);
                    chatHistory.appendChild(responseDiv);
    
                    // Log the question and response to the console for checking
                    console.log('Question:', entry.question);
                    console.log('Response:', entry.response);
                });
            } else {
                const noHistoryMessage = document.createElement('div');
                noHistoryMessage.className = 'message bot-message';
                noHistoryMessage.textContent = 'No history available.';
                chatHistory.appendChild(noHistoryMessage);
            }
        }
    </script>
    
    
    
    
</body>


</html>
