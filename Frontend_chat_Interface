case 6: {
  // case 6: allowed ranks 1..3, require exactly 3 unique valid ranks, save r14 -> r23
  const inputs6 = $('input[id^="q6_"]'); // selects q6_1 ... q6_10 (or however many are present)
  const allowedSet6 = new Set(['1','2','3']);

  let hasInvalid6 = false;
  const filled6 = [];

  inputs6.each(function () {
    let raw = this.value ? this.value.trim() : '';

    // prefer unmasked value if inputmask is used
    try {
      if (typeof $(this).inputmask === 'function') {
        const unmasked = $(this).inputmask('unmaskedvalue');
        if (unmasked !== undefined && unmasked !== null && String(unmasked).trim() !== '') {
          raw = String(unmasked).trim();
        }
      }
    } catch (e) {
      // ignore inputmask errors, use raw value
    }

    if (raw === '') return; // skip empties

    if (!allowedSet6.has(raw)) {
      hasInvalid6 = true;
    }

    filled6.push(raw);
  });

  const uniqueFilled6 = new Set(filled6);
  const hasDuplicates6 = uniqueFilled6.size !== filled6.length;

  if (hasInvalid6 || hasDuplicates6) {
    $("#message").removeClass("d-none");
  } else {
    $("#message").addClass("d-none");
  }

  const uniqueValidCount6 = Array.from(uniqueFilled6).filter(v => allowedSet6.has(v)).length;

  if (uniqueValidCount6 === 3 && !hasInvalid6 && !hasDuplicates6) {
    $(".nextbutton").removeAttr("disabled").removeClass("disabled");
  } else {
    $(".nextbutton").attr("disabled", true).addClass("disabled");
  }

  // Save to sessionStorage r14 -> r{14 + inputs6.length - 1}
  inputs6.each(function(i) {
    let raw = this.value ? this.value.trim() : '';
    try {
      if (typeof $(this).inputmask === 'function') {
        const unmasked = $(this).inputmask('unmaskedvalue');
        if (unmasked !== undefined && unmasked !== null && String(unmasked).trim() !== '') {
          raw = String(unmasked).trim();
        }
      }
    } catch (e) {
      // ignore
    }
    if (raw === '' || !allowedSet6.has(raw)) raw = "0";
    sessionStorage.setItem("r" + (14 + i), raw);
  });

  // optional debug:
  // console.log({filled6, uniqueValidCount6, hasInvalid6, hasDuplicates6});
  break;
}

case 7: {
  // case 7: allowed ranks 1..5, require exactly 5 unique valid ranks, save r24 -> r35
  const inputs7 = $('input[id^="q6_"]'); // selects q6_1 ... q6_12 (or however many are present)
  const allowedSet7 = new Set(['1','2','3','4','5']);

  let hasInvalid7 = false;
  const filled7 = [];

  inputs7.each(function () {
    let raw = this.value ? this.value.trim() : '';

    // prefer unmasked value if inputmask is used
    try {
      if (typeof $(this).inputmask === 'function') {
        const unmasked = $(this).inputmask('unmaskedvalue');
        if (unmasked !== undefined && unmasked !== null && String(unmasked).trim() !== '') {
          raw = String(unmasked).trim();
        }
      }
    } catch (e) {
      // ignore inputmask errors, use raw value
    }

    if (raw === '') return; // skip empties

    if (!allowedSet7.has(raw)) {
      hasInvalid7 = true;
    }

    filled7.push(raw);
  });

  const uniqueFilled7 = new Set(filled7);
  const hasDuplicates7 = uniqueFilled7.size !== filled7.length;

  if (hasInvalid7 || hasDuplicates7) {
    $("#message").removeClass("d-none");
  } else {
    $("#message").addClass("d-none");
  }

  const uniqueValidCount7 = Array.from(uniqueFilled7).filter(v => allowedSet7.has(v)).length;

  if (uniqueValidCount7 === 5 && !hasInvalid7 && !hasDuplicates7) {
    $(".nextbutton").removeAttr("disabled").removeClass("disabled");
  } else {
    $(".nextbutton").attr("disabled", true).addClass("disabled");
  }

  // Save to sessionStorage r24 -> r{24 + inputs7.length - 1}
  inputs7.each(function(i) {
    let raw = this.value ? this.value.trim() : '';
    try {
      if (typeof $(this).inputmask === 'function') {
        const unmasked = $(this).inputmask('unmaskedvalue');
        if (unmasked !== undefined && unmasked !== null && String(unmasked).trim() !== '') {
          raw = String(unmasked).trim();
        }
      }
    } catch (e) {
      // ignore
    }
    if (raw === '' || !allowedSet7.has(raw)) raw = "0";
    sessionStorage.setItem("r" + (24 + i), raw);
  });

  // optional debug:
  // console.log({filled7, uniqueValidCount7, hasInvalid7, hasDuplicates7});
  break;
}
