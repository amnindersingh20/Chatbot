import json
import boto3
from botocore.config import Config
import traceback

bedrock_agent = boto3.client(
    'bedrock-agent-runtime',
    region_name='us-east-1',  # Match your knowledge base region
    config=Config(read_timeout=45)
    
def lambda_handler(event, context):
    try:
        # Parse input
        body = json.loads(event.get('body', '{}'))
        user_input = body.get('message') or body.get('prompt')
        
        if not user_input:
            return {
                'statusCode': 400,
                'body': json.dumps({'error': 'Missing message/prompt in request body'})
            }

        # Dynamic retrieval parameters from request (with defaults)
        params = {
            "number_of_results": int(body.get("num_results", 10)),  # Default 10
            "search_type": body.get("search_type", "HYBRID")        # Default HYBRID
        }

        # Retrieve and generate with dynamic config
        response = bedrock_agent.retrieve_and_generate(
            input={'text': user_input},
            retrieveAndGenerateConfiguration={
                'type': 'KNOWLEDGE_BASE',
                'knowledgeBaseConfiguration': {
                    'knowledgeBaseId': 'YOUR_KB_ID',  # REQUIRED
                    'modelArn': 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-v2',  # Choose your model
                    'retrievalConfiguration': {
                        'vectorSearchConfiguration': {
                            'numberOfResults': params["number_of_results"],
                            'overrideSearchType': params["search_type"]
                        }
                    }
                }
            }
        )

        # Process response
        completion = response['output']['text']
        
        citations = []
        if 'retrievedReferences' in response:
            for ref in response['retrievedReferences']:
                citation = {
                    'source': ref.get('location', {}).get('s3Location', {}).get('uri', ''),
                    'text': ref.get('content', {}).get('text', '')
                }
                citations.append(citation)

        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'message': completion,
                'citations': citations
            })
        }

    except Exception as e:
        print(f"Error: {str(e)}")
        traceback.print_exc()
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': 'Internal server error',
                'details': str(e)
            })
        }
