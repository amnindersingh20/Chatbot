import json
import boto3
import logging
from botocore.exceptions import ClientError

logger = logging.getLogger()
logger.setLevel(logging.INFO)

bedrock_client = boto3.client(service_name='bedrock-runtime')

def stream_conversation(model_id, messages, system_prompts, inference_config, additional_model_fields):
    logger.info("Streaming messages with model %s", model_id)

    response = bedrock_client.converse_stream(
        modelId=model_id,
        messages=messages,
        system=system_prompts,
        inferenceConfig=inference_config,
        additionalModelRequestFields=additional_model_fields
    )

    stream = response.get('stream')
    output = ""
    if stream:
        for event in stream:
            if 'contentBlockDelta' in event:
                output += event['contentBlockDelta']['delta']['text']
    return output

def lambda_handler(event, context):
    try:
        # Parse input from POST body
        body = json.loads(event.get("body", "{}"))
        input_text = body.get("input_text", "Write an essay on the importance of biodiversity.")

        model_id = "anthropic.claude-3-5-sonnet-220-v1:0"
        system_prompt = "You are an app that writes essays on various topics in a clear and engaging style."

        messages = [{"role": "user", "content": [{"text": input_text}]}]
        system_prompts = [{"text": system_prompt}]
        inference_config = {"temperature": 0.7}
        additional_model_fields = {"top_k": 250}

        result = stream_conversation(
            model_id,
            messages,
            system_prompts,
            inference_config,
            additional_model_fields
        )

        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Methods": "POST, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type"
            },
            "body": json.dumps({"result": result})
        }

    except ClientError as err:
        logger.error("Client error: %s", err)
        return {
            "statusCode": 500,
            "headers": {
                "Content-Type": "application/json",
            },
            "body": json.dumps({"error": err.response['Error']['Message']})
        }
