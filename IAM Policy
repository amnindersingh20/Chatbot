import json
import logging
import os

import boto3
from botocore.exceptions import ClientError

OTHER_LAMBDA_NAME = os.environ.get("OTHER_LAMBDA_NAME", "Poc_bot_lambda2")
REGION_NAME      = os.environ.get("AWS_REGION", "us-east-1")
MODEL_ID         = os.environ.get("BEDROCK_MODEL_ID", "anthropic.claude-3-5-sonnet-20240620-v1:0")

logger = logging.getLogger()
logger.setLevel(logging.INFO)

bedrock       = boto3.client("bedrock-runtime", region_name=REGION_NAME)
lambda_client = boto3.client("lambda",          region_name=REGION_NAME)

def lambda_handler(event, context):
    logger.info("Received payload: %s", json.dumps(event))

    condition_param = next(
        (p for p in event.get("parameters", []) if p.get("name") == "condition"),
        None
    )
    key_phrase = ""
    if condition_param and condition_param.get("value"):
        text = condition_param["value"]
        logger.info("Condition text: %s", text)
        prompt = (
            "Extract the most important key phrase from the following text. "
            "Respond with a single string only. Do not include any other text."
            f"\n\nText:\n\"\"\"\n{text}\n\"\"\""
        )
        try:
            response = bedrock.invoke_model(
                 modelId=MODEL_ID,
                 contentType="application/json",
                 accept="application/json",
                 body=json.dumps({
                     "anthropic_version": "bedrock-2023-05-31",
                     "messages": [{"role": "user", "content": prompt}],
                     "max_tokens": 1024,
                     "temperature": 0
                 })
             )
            logger.info("Bedrock response: %s", response)
            body_str = response["body"].read().decode("utf-8")
            output = json.loads(body_str)
            try:
                content = output.get("content", [])
                if content and isinstance(content, list):
                    key_phrase = content[0].get("text", "").strip('"')
                else:
                    logger.warning("Unexpected response format: 'content' field is missing or invalid.")
                    key_phrase = ""
                    logger.info("Extracted key phrase for 'condition': %s", key_phrase)
            except (ValueError, json.JSONDecodeError) as e:
                logger.error("Failed to parse model output as JSON: %s", e)
                key_phrase = ""
        except ClientError as e:
            logger.error("Bedrock invocation error: %s", e)
            key_phrase = ""

    enriched = event.copy()
    enriched_parameters = []
    for p in event.get("parameters", []):
        item = p.copy()
        if item.get("name") == "condition":
            item["value"] = key_phrase
        enriched_parameters.append(item)
    enriched["parameters"] = enriched_parameters
    logger.info("Enriched payload: %s", json.dumps(enriched))

    try:
        invoke_resp = lambda_client.invoke(
            FunctionName   = OTHER_LAMBDA_NAME,
            InvocationType = "RequestResponse",
            Payload        = json.dumps(enriched),
        )
        payload_bytes = invoke_resp["Payload"].read()
        payload_str   = payload_bytes.decode("utf-8")
        downstream_output = json.loads(payload_str)
        logger.info("Downstream Lambda response: %s", payload_str)
        return {
            "statusCode": 200,
            "body": json.dumps(downstream_output)
        }
    except ClientError as e:
        logger.error("Failed to invoke '%s': %s", OTHER_LAMBDA_NAME, e)
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
