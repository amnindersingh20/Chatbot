import json
# from numpy import double, dtype
import pandas as pd
import re


def format_results_list(lst, max, string=False):
    if string: 
        lst = ['Blank' if s=='' else '"' + s + '"' for s in lst]

    if len(lst) > max:
        return ', '.join(lst[:max]) + '...'
    else:
        return ', '.join(lst)


class PIT:
    def __init__(self, payload):
        self.path = payload['path']
        self.fileName = self.path.replace('/', '\\').split('\\')[-1].split('.')[0]
        self.fileType = payload['fileType']
        self.skiprows = payload['header']
        self.skipfooter = payload['footer']
        self.layouts = payload['layouts']
        self.key = [layout['key'] for layout in payload['layouts']]
        self.ri = [layout['ri'] for layout in payload['layouts']]
        self.repeating  = [layout['repeating'] for layout in payload['layouts']]
        self.fieldNames = [[field['name'] for field in layout['fields']] for layout in payload['layouts']]
        self.fieldWidths = [[field['width'] for field in layout['fields']] for layout in payload['layouts']]
        self.fieldInfo = [{field['name']:field for field in layout['fields']} for layout in payload['layouts']]
        self.printItmes = 5
        self.verified = False
        self.checks, self.dfs = self.review_and_build()

        
    def read_data(self, layoutNum):
        self.check_ri(layoutNum)
        if self.fileType == 'Excel':
            df = pd.read_excel(
                self.path,
                dtype = str,
                header = None,
                keep_default_na = False,
                usecols = range(0, len(self.fieldNames[layoutNum])),
                names = self.fieldNames[layoutNum],
                skiprows = self.skiprows,
                skipfooter = self.skipfooter,
                index_col=None
            )
        elif self.fileType == 'FW':
            df = pd.read_fwf(
                self.path,
                dtype = str,
                header = None,
                keep_default_na = False,
                names = self.fieldNames[layoutNum],
                skiprows = self.skiprows,
                skipfooter = self.skipfooter,
                widths = self.fieldWidths[layoutNum]
            )
        else:
            df = pd.read_csv(
                self.path,
                dtype = str,
                header = None,
                keep_default_na = False,
                names = self.fieldNames[layoutNum],
                skiprows = self.skiprows,
                skipfooter = self.skipfooter,
                sep = self.fileType,
                index_col = False,
                engine = 'python'
            )
        return df

    
    def check_ri(self, layoutNum):
        ri = self.ri[layoutNum]

        if ri != {}:
            riType = str
            reVal = str(ri['val'])
            if self.fileType == 'Excel':
                riDf = pd.read_excel(
                    self.path,
                    dtype = riType,
                    header = None,
                    keep_default_na = False,
                    skipfooter = self.skipfooter,
                    usecols = [ri['pos']],
                    index_col = False
                )
            elif self.fileType == 'FW':
                riDf = pd.read_fwf(
                    self.path,
                    dtype = riType,
                    header = None,
                    keep_default_na = False,
                    skipfooter = self.skipfooter,
                    colspecs = [(sum(self.fieldWidths[layoutNum][:ri['pos']]),sum(self.fieldWidths[layoutNum][:ri['pos']+1]))],
                    index_col = False
                )
            else:
                riDf = pd.read_csv(
                    self.path,
                    dtype = riType,
                    header = None,
                    keep_default_na = False,
                    skipfooter = self.skipfooter,
                    sep = self.fileType,
                    usecols = [ri['pos']],
                    index_col = False,
                    engine = 'python'
                )

            self.skiprows = list(riDf[riDf[ri['pos']] != reVal].index)


    def review_and_build(self):
        self.verified = True
        checks = []
        dfs = []
        for layoutNum in range(len(self.layouts)):
            
            layoutChecks = {fieldName:{} for fieldName in self.fieldNames[layoutNum]}
            df = self.read_data(layoutNum)

            #Check key identifier for duplicates
            if self.key[layoutNum] != '':
                layoutChecks[self.key[layoutNum]]['Duplicates'] = format_results_list(df.loc[df.duplicated([self.key[layoutNum]]), self.key[layoutNum]].head(self.printItmes + 1).tolist(), self.printItmes)

            for fieldName in self.fieldNames[layoutNum]:
                try:
                    #Date
                    dateFormat = self.fieldInfo[layoutNum][fieldName]['dateFormat']
                    if dateFormat != '':
                        lowDate = dateFormat.replace('%Y','1800').replace('%m','01').replace('%d','01')#NOTE Check 
                        df[fieldName] = df[fieldName].replace({'':lowDate})
                        df[fieldName] = df[fieldName].replace({None:lowDate})
                        df[fieldName] = df[fieldName].replace({'0':lowDate})
                        #NOTE Check format
                        df[fieldName] = df[fieldName].apply(lambda t: pd.to_datetime(t, format=dateFormat))
                        layoutChecks[fieldName]['Min'] = df[fieldName].min().strftime('%Y-%m-%d')
                        layoutChecks[fieldName]['Max'] = df[fieldName].max().strftime('%Y-%m-%d')
                        df[fieldName] = df[fieldName].dt.strftime('%m/%d/%Y')

                    #String
                    elif 'X' in self.fieldInfo[layoutNum][fieldName]['description']:
                        df[fieldName] = df[fieldName].replace({None:''})
                        layoutChecks[fieldName]['Values'] = format_results_list(df[fieldName].unique()[:self.printItmes + 1].tolist(), self.printItmes, string=True)
                        layoutChecks[fieldName]['Max Length'] = int(df[fieldName].apply(len).max())
                        layoutChecks[fieldName]['Special Char'] = format_results_list(set(sum(df[fieldName].str.findall(r'[^a-zA-Z !@#$%&*_+-|\:;<>./()[\]{}]|[,]').tolist(),[])), self.printItmes, string=True)

                    #Explicit decimal 
                    elif '.' in self.fieldInfo[layoutNum][fieldName]['description']:
                        df[fieldName] = df[fieldName].replace({'':'0'})
                        df[fieldName] = df[fieldName].replace({None:'0'})
                        #NOTE Check format
                        layoutChecks[fieldName]['Max Decimals'] = int(df[fieldName].apply(lambda x: len(x.split('.')[1] if '.' in x else '')).max())
                        df[fieldName] = df[fieldName].astype(float)
                        layoutChecks[fieldName]['Min'] = float(df[fieldName].min())
                        layoutChecks[fieldName]['Max'] = float(df[fieldName].max())

                    #Implicit decimal
                    elif 'v' in self.fieldInfo[layoutNum][fieldName]['description']:
                        df[fieldName] = df[fieldName].replace({'':'0'})
                        df[fieldName] = df[fieldName].replace({None:'0'})
                        #NOTE Check format
                        df[fieldName] = df[fieldName].astype(float)
                        implicitFraction = 10 ** int(re.findall(r'\d+', self.fieldInfo[layoutNum][fieldName]['description'])[3])
                        df[fieldName] = df[fieldName].apply(lambda x: x / implicitFraction)
                        layoutChecks[fieldName]['Min'] = float(df[fieldName].min())
                        layoutChecks[fieldName]['Max'] = float(df[fieldName].max())
                        
                    #Int
                    else:
                        df[fieldName] = df[fieldName].replace({'':'0'})
                        df[fieldName] = df[fieldName].replace({None:'0'})
                        #NOTE Check format
                        df[fieldName] = df[fieldName].astype(int)
                        layoutChecks[fieldName]['Min'] = int(df[fieldName].min())
                        layoutChecks[fieldName]['Max'] = int(df[fieldName].max())

                except Exception as e:
                    df[fieldName] = df[fieldName].replace({None:''})
                    layoutChecks[fieldName]['Values'] = format_results_list(df[fieldName].unique()[:self.printItmes + 1].tolist(), self.printItmes, string=True)
                    layoutChecks[fieldName]['Critical Error'] = str(e)
            
            checks.append(layoutChecks)
            dfs.append(df)

        return(checks, dfs)


    def to_excel(self, path):
        writer = pd.ExcelWriter(path + '/' + self.fileName + '.xlsx')
        for layoutNum, df in enumerate(self.dfs):
            for fieldName in self.fieldNames[layoutNum]:
                if not self.fieldInfo[layoutNum][fieldName]['used']:
                    del df[fieldName]
    

            df.to_excel(writer, self.fileName + str(layoutNum), index=False)

        writer.close()


    def to_json(self):
        pptDict = {}
        for layoutNum, df in enumerate(self.dfs):
            if self.key[layoutNum] != '':
                for fieldName in self.fieldNames[layoutNum]:
                    if not self.fieldInfo[layoutNum][fieldName]['used']:
                        del df[fieldName]

                df['toJsonIndex'] = df[self.key[layoutNum]]

                if not self.repeating[layoutNum]:
                    if any(df.duplicated(subset=['toJsonIndex'])):
                        raise Exception('Duplicate key identifiers found')

                    layoutDict = json.loads(df.set_index('toJsonIndex').to_json(orient='index'))
                    pptDict = self.update_ppt_dict(pptDict, layoutDict)
                else:
                    num = 0
                    while True:
                        dfr = df.drop_duplicates(subset=['toJsonIndex'])
                        dfr.columns = ['[' + str(num) + '].' + fieldName for fieldName in self.fieldNames[layoutNum] if self.fieldInfo[layoutNum][fieldName]['used']] + ['toJsonIndex']
                        layoutDict = json.loads(dfr.set_index('toJsonIndex').to_json(orient='index'))
                        pptDict = self.update_ppt_dict(pptDict, layoutDict)
                        if not any(df.duplicated(subset=['toJsonIndex'])):
                            break
                        
                        df = df.loc[df.duplicated(subset=['toJsonIndex'])]
                        num += 1

            else:
                lutData = {}
                djJson = json.loads(df.to_json())
                for fieldName in djJson:
                    for index, value in djJson[fieldName].items():
                        lutData['[' + str(index) + '].' + fieldName] = value

                pptDict['LUT'] = lutData
            
        data = [{'userID':k, 'dataFields':v, 'ssn':''} for k, v in pptDict.items()]
        return self.fileName, data
    

    def update_ppt_dict(self, pptDict, layoutDict):
        if pptDict == {}:
            pptDict = layoutDict
        else:
            for ppt in layoutDict:
                if ppt in pptDict.keys():
                    pptDict[ppt].update(layoutDict[ppt])
                else:
                    pptDict[ppt] = layoutDict[ppt]

        
        return pptDict

