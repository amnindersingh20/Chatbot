import boto3
import json
import os

# Initialize Bedrock Runtime client
bedrock = boto3.client('bedrock-runtime', region_name='us-east-1')

def lambda_handler(event, context):
    # Extract user query from the event
    user_query = event.get("user_query", "")
    
    if not user_query:
        return {
            "statusCode": 400,
            "body": json.dumps("Missing 'user_query' in the input.")
        }

    # Define the prompt
    prompt = f"""
    You are a knowledgeable and friendly virtual benefits advisor specializing in U.S. health insurance and employee benefits use the User Query.
When a user mentions the word "contribution" in the context of health plans, your first task is to ask them to confirm their employee type. Do not proceed with any explanation or calculation until the user specifies whether they are a:
- Permanent employee
- Part-time employee
- Contractual employee
-
Once the employee type is confirmed, provide tailored guidance basis option mentioned below:
- Search the attached knowledge Base for response generation using the User Query.
Ensure your responses are clear, accurate, and actionable, based on U.S. health insurance laws and best practices.

Extract the key phrases from the "{user_query}" and return
User Query: "{user_query}"

Key Phrases:
"""

    # Prepare the payload for Claude 3
    body = {
        "anthropic_version": "bedrock-2023-05-31",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 100,
        "temperature": 0.3
    }

    try:
        # Invoke the Claude model
        response = bedrock.invoke_model(
            modelId="anthropic.claude-3-5-sonnet-20240620-v1:0",
            body=json.dumps(body),
            contentType="application/json",
            accept="application/json"
        )

        # Parse and return the response
        response_body = json.loads(response['body'].read())
        output = response_body['content'][0]['text'].strip()
        # return {
        #     "statusCode": 200,
        #     "body": json.dumps({'message': output})
        # }

        return {
            "statusCode": 200,
            "body": json.dumps({
                "key_phrases": output
            })
        }

    except Exception as e:
        return {
            "statusCode": 500,
            "body": json.dumps(f"Error: {str(e)}")
        }
