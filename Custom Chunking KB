case 6: {
  const inputs6 = $('input[id^="q6_"]').slice(0, 10); // your 10 input boxes
  const maxValue = inputs6.length; // dynamically determine max value allowed
  const allowedValues6 = new Set(Array.from({length: maxValue}, (_, i) => (i+1).toString()));

  let hasInvalid6 = false;
  const filledVals = [];

  inputs6.each(function () {
    let raw = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
    raw = (raw || '').toString().trim();

    if (raw === '') return; // skip empty boxes for message, but counted later

    if (!allowedValues6.has(raw)) hasInvalid6 = true; // mark invalid if out of allowed range
    filledVals.push(raw);
  });

  // duplicates check among non-empty values
  const uniqueFilled = new Set(filledVals);
  const hasDuplicates = uniqueFilled.size !== filledVals.length;

  // Show/hide message ONLY if user typed something AND invalid/duplicate
  if (filledVals.length > 0 && (hasInvalid6 || hasDuplicates)) {
    $("#message").removeClass("d-none");
  } else {
    $("#message").addClass("d-none");
  }

  // Enable Next button only when all inputs are filled, valid, and unique
  if (filledVals.length === inputs6.length && !hasInvalid6 && !hasDuplicates) {
    $(".nextbutton").removeAttr("disabled").removeClass("disabled");
  } else {
    $(".nextbutton").attr("disabled", true).addClass("disabled");
  }

  // Save to sessionStorage (r15 â†’ r24)
  inputs6.each(function (i) {
    let v = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
    v = (v || '').toString().trim();
    if (v === '' || !allowedValues6.has(v)) v = "0";
    sessionStorage.setItem("r" + (15 + i), v);
  });

  // Restrict input to maxValue
  inputs6.on('input', function() {
    let val = this.value.replace(/\D/g, ''); // remove non-numeric
    if (parseInt(val) > maxValue) val = maxValue.toString();
    this.value = val;
  });

  console.log('case6 filled:', filledVals, 'invalid:', hasInvalid6, 'duplicates:', hasDuplicates);

  break;
}
