case 6: {
  const inputs6 = $('input[id^="q6_"]').slice(0, 10); // 10 input boxes
  const allowedValues6 = new Set(['1','2','3','4','5','6','7','8','9','10']);

  let hasInvalid6 = false;
  const filledVals = [];

  inputs6.each(function () {
    // prefer unmasked value if using inputmask:
    let raw = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
    raw = (raw || '').toString().trim();

    // no empty values allowed
    if (raw === '') {
      hasInvalid6 = true;
      return;
    }

    // check range 1–10
    if (!allowedValues6.has(raw)) hasInvalid6 = true;

    filledVals.push(raw);
  });

  // duplicates check
  const uniqueFilled = new Set(filledVals);
  const hasDuplicates = uniqueFilled.size !== filledVals.length;

  // Show/hide validation message
  if (hasInvalid6 || hasDuplicates) {
    $("#message").removeClass("d-none");
  } else {
    $("#message").addClass("d-none");
  }

  // enable Next button only when:
  //  - all 10 boxes are filled
  //  - all values are 1–10
  //  - no duplicates
  if (!hasInvalid6 && !hasDuplicates && filledVals.length === inputs6.length) {
    $(".nextbutton").removeAttr("disabled").removeClass("disabled");
  } else {
    $(".nextbutton").attr("disabled", true).addClass("disabled");
  }

  // Save to sessionStorage (r15 → r24)
  inputs6.each(function (i) {
    let v = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
    v = (v || '').toString().trim();
    if (v === '' || !allowedValues6.has(v)) v = "0";
    sessionStorage.setItem("r" + (15 + i), v);
  });

  // helpful debug log
  console.log('case6 filled:', filledVals, 'invalid:', hasInvalid6, 'duplicates:', hasDuplicates);

  break;
}
