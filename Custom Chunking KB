case 6: {
  const inputs6 = $('input[id^="q6_"]').slice(0, 10);
  const maxValue = inputs6.length;

  // Initialize allowed values dynamically
  const allowedValues6 = new Set(Array.from({length: maxValue}, (_, i) => (i + 1).toString()));

  // Function to validate inputs
  function validateInputs() {
    const values = [];
    let hasInvalid = false;

    inputs6.each(function() {
      let val = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
      val = (val || '').toString().trim();

      if (val === '') {
        hasInvalid = true; // empty box is invalid for button
        return;
      }

      if (!allowedValues6.has(val)) hasInvalid = true; // out of range
      values.push(val);
    });

    // Check for duplicates
    const uniqueValues = new Set(values);
    const hasDuplicates = uniqueValues.size !== values.length;

    // Show message ONLY if user typed something and there is an issue
    if (values.length > 0 && (hasInvalid || hasDuplicates)) {
      $("#message").removeClass("d-none");
    } else {
      $("#message").addClass("d-none");
    }

    // Enable Next button only if all boxes filled, unique, and valid
    if (!hasInvalid && !hasDuplicates && values.length === inputs6.length) {
      $(".nextbutton").removeAttr("disabled").removeClass("disabled");
    } else {
      $(".nextbutton").attr("disabled", true).addClass("disabled");
    }

    // Save to sessionStorage
    inputs6.each(function(i) {
      let v = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
      v = (v || '').toString().trim();
      if (!allowedValues6.has(v)) v = "0";
      sessionStorage.setItem("r" + (15 + i), v);
    });

    console.log('Values:', values, 'Duplicates:', hasDuplicates, 'Invalid:', hasInvalid);
  }

  // Restrict input to numbers 1â€“maxValue
  inputs6.on('input', function() {
    // Remove non-numeric characters
    let val = this.value.replace(/\D/g, '');
    if (val === '') return; // allow temporarily empty for typing

    let num = parseInt(val, 10);

    // Enforce min/max
    if (num < 1) num = 1;
    if (num > maxValue) num = maxValue;

    this.value = num.toString();

    // Run validation on every input change
    validateInputs();
  });

  // Initial validation
  validateInputs();

  break;
}
