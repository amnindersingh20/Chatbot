case 6:
      const inputs6 = $('input[id^="q6_"]').slice(0, 10); // adjust slice if you really have 10 or fewer
      const allowedValues6 = new Set(['1', '2', '3']);

      let hasInvalid6 = false;
      const filledVals = [];

      inputs6.each(function () {
        // prefer unmasked value if using inputmask:
        let raw = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
        raw = (raw || '').toString().trim();

        if (raw === '') return; // skip empties

        if (!allowedValues6.has(raw)) hasInvalid6 = true;
        filledVals.push(raw);
      });

      const uniqueFilled = new Set(filledVals);
      const hasDuplicates = uniqueFilled.size !== filledVals.length;

      // Show/hide message
      if (hasInvalid6 || hasDuplicates) $("#message").removeClass("d-none");
      else $("#message").addClass("d-none");

      const uniqueValidCount = Array.from(uniqueFilled).filter(v => allowedValues6.has(v)).length;

      if (uniqueValidCount === 3 && !hasInvalid6 && !hasDuplicates) {
        $(".nextbutton").removeAttr("disabled").removeClass("disabled");
      } else {
        $(".nextbutton").attr("disabled", true).addClass("disabled");
      }

      // Save (r14 â†’ r23)
      inputs6.each(function (i) {
        let v = (typeof $(this).inputmask === 'function') ? $(this).inputmask('unmaskedvalue') : this.value;
        v = (v || '').toString().trim();
        if (v === '' || !allowedValues6.has(v)) v = "0";
        sessionStorage.setItem("r" + (15 + i), v);
      });

      // helpful debug log (remove in production)
      console.log('case6 filled:', filledVals, 'uniqueValidCount:', uniqueValidCount, 'invalid:', hasInvalid6, 'duplicates:', hasDuplicates);

      break;
