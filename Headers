Traceback (most recent call last):
  File "D:\Users\A1053499\Downloads\Langchain_code\app.py", line 73, in <module>
    result = runnable.invoke(
        {"question": user_input},
        config={"configurable": {"session_id": session_id}}
    )
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\base.py", line 5431, in invoke
    return self.bound.invoke(
           ~~~~~~~~~~~~~~~~~^
        input,
        ^^^^^^
        self._merge_configs(config),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        **{**self.kwargs, **kwargs},
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\base.py", line 5431, in invoke
    return self.bound.invoke(
           ~~~~~~~~~~~~~~~~~^
        input,
        ^^^^^^
        self._merge_configs(config),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        **{**self.kwargs, **kwargs},
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\base.py", line 3047, in invoke
    input_ = context.run(step.invoke, input_, config)
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\base.py", line 5431, in invoke
    return self.bound.invoke(
           ~~~~~~~~~~~~~~~~~^
        input,
        ^^^^^^
        self._merge_configs(config),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        **{**self.kwargs, **kwargs},
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\base.py", line 4772, in invoke
    return self._call_with_config(
           ~~~~~~~~~~~~~~~~~~~~~~^
        self._invoke,
        ^^^^^^^^^^^^^
    ...<2 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\base.py", line 1940, in _call_with_config
    context.run(
    ~~~~~~~~~~~^
        call_func_with_variable_args,  # type: ignore[arg-type]
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    ),
    ^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\config.py", line 428, in call_func_with_variable_args
    return func(input, **kwargs)  # type: ignore[call-arg]
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\base.py", line 4641, in _invoke
    output = output.invoke(
        input_,
    ...<4 lines>...
        ),
    )
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain_core\runnables\base.py", line 5431, in invoke
    return self.bound.invoke(
           ~~~~~~~~~~~~~~~~~^
        input,
        ^^^^^^
        self._merge_configs(config),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        **{**self.kwargs, **kwargs},
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain\chains\base.py", line 167, in invoke
    raise e
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain\chains\base.py", line 162, in invoke
    final_outputs: dict[str, Any] = self.prep_outputs(
                                    ~~~~~~~~~~~~~~~~~^
        inputs, outputs, return_only_outputs
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain\chains\base.py", line 463, in prep_outputs
    self.memory.save_context(inputs, outputs)
    ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain\memory\chat_memory.py", line 72, in save_context
    input_str, output_str = self._get_input_output(inputs, outputs)
                            ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "D:\Users\A1053499\Downloads\Langchain_code\langchain\Lib\site-packages\langchain\memory\chat_memory.py", line 61, in _get_input_output
    raise ValueError(
    ...<3 lines>...
    )
ValueError: Got multiple output keys: dict_keys(['answer', 'source_documents', 'generated_question']), cannot determine which to store in memory. Please set the 'output_key' explicitly.
