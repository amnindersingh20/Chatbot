async function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;
    messageInput.value = '';
    errorMessage.textContent = '';
    appendMessage(message, true);
    typingIndicator.style.display = 'block';

    try {
        let condition = '';
        let plan = '1651'; // Default plan if not provided

        const planRegex = /\bfor\s+plan\s+(\d+)\b/i;
        const match = message.match(planRegex);

        if (match) {
            plan = match[1];
            condition = message.replace(planRegex, '').trim();
        } else {
            condition = message;
        }

        const response = await fetch(API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                parameters: [
                    { name: 'condition', value: condition },
                    { name: 'plan', value: plan }
                ]
            })
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();

        // Support both response types
        let botReply = '';

        if (typeof data.message === 'string') {
            botReply = data.message;
        } else if (data.value && data.condition && data.plan) {
            botReply = `For "${data.condition}" under plan ${data.plan}, the value is: ${data.value}`;
        } else {
            botReply = '[No meaningful response]';
        }

        appendMessage(botReply, false);

        userHistory.push({ question: message, response: botReply });
        sessionStorage.setItem('userHistory', JSON.stringify(userHistory));
    } catch (error) {
        errorMessage.textContent = `Error: ${error.message}`;
    } finally {
        typingIndicator.style.display = 'none';
    }
}
