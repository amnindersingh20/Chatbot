import logging
import json
import re
import difflib
from io import StringIO
import boto3
from datetime import datetime, timezone
import pandas as pd
import time
# import pytz # You would still need pytz if you want IST time in save_chat_history

log = logging.getLogger()
log.setLevel(logging.INFO)

S3_BUCKET = "pocbotai"
S3_KEY = "2025 Medical HPCC Combined.csv"
FALLBACK_LAMBDA_NAME = "Poc_Bot_lambda1"
BEDROCK_MODEL_ID = "anthropic.claude-3-5-sonnet-20240620-v1:0"

DYNAMODB_TABLE_NAME = "POC-Chatbot-ChatSession"

_s3 = boto3.client('s3')
_lambda = boto3.client('lambda')
_bedrock = boto3.client("bedrock-runtime", region_name="us-east-1")
_comprehend = boto3.client("comprehend", region_name="us-east-1")
_dynamodb = boto3.resource('dynamodb', region_name="us-east-1")
_dynamodb_table = _dynamodb.Table(DYNAMODB_TABLE_NAME)

# --- REMOVED: SYNONYMS dictionary ---

def normalize(text: str) -> str:
    # This remains for normalizing the data points in the CSV and the Comprehend output
    return re.sub(r'[^a-z0-9]', '', str(text).lower())

# --- REMOVED: strip_filler function ---
# --- REMOVED: expand_synonyms function ---

def load_dataframe():
    try:
        obj = _s3.get_object(Bucket=S3_BUCKET, Key=S3_KEY)
        df = pd.read_csv(StringIO(obj['Body'].read().decode('utf-8')), dtype=str)
        df.columns = df.columns.str.strip()
        df['Data Point Name'] = (
            df['Data Point Name'].astype(str)
              .str.replace('–', '-', regex=False)
              .str.replace('\u200b', '', regex=False)
              .str.strip().str.lower()
        )
        df['normalized_name'] = df['Data Point Name'].apply(normalize)
        return df
    except Exception:
        log.exception("Failed to load CSV from S3")
        return pd.DataFrame()

DF = load_dataframe()

def get_plan_value(comprehend_processed_condition: str, plan_id: str):
    """
    Retrieves plan value using a condition already processed by Comprehend.
    """
    # The input 'comprehend_processed_condition' is expected to be the clean
    # key phrases from Comprehend, so we just normalize it for lookup.
    query_norm = normalize(comprehend_processed_condition)
    log.info("Lookup trace: processed_condition=%r → norm=%r",
             comprehend_processed_condition, query_norm)

    if 'Data Point Name' not in DF.columns or plan_id not in DF.columns:
        return 500, f"CSV missing required columns or plan '{plan_id}'"

    # We now use 'str.contains' for a more flexible match against the
    # normalized data point names, as Comprehend might return phrases
    # that are subsets or variations.
    matches = DF[DF['normalized_name'].str.contains(query_norm, na=False)]
    
    if matches.empty:
        # Fallback to difflib close matches if direct contains doesn't work,
        # but apply it on the normalized Comprehend output.
        close = difflib.get_close_matches(
            query_norm, DF['normalized_name'].tolist(), n=5, cutoff=0.7
        )
        matches = DF[DF['normalized_name'].isin(close)] if close else matches

    if matches.empty:
        return 404, f"No data-points matching '{comprehend_processed_condition}' found"

    results = []
    for _, row in matches.iterrows():
        val = row.get(plan_id)
        if pd.notna(val):
            results.append({
                "condition": row['Data Point Name'], # Use original Data Point Name from CSV
                "plan": plan_id,
                "value": val
            })

    if not results:
        return 404, f"No value for '{comprehend_processed_condition}' under plan '{plan_id}'"
    return 200, results

def summarize_with_claude35(composite_result: list, options: list, elected: dict) -> str:
    options_list = [
        {"optionId": opt["optionId"], "optionDescription": opt["optionDescription"]}
        for opt in options
    ]
    elected_desc = (elected or {}).get("optionDescription")
    prompt = f"""
You are a helpful and friendly health benefits advisor.
Here are the available options:
{json.dumps(options_list, indent=2)}
The employee elected: {elected_desc}.

Retrieved plan data:
{json.dumps(composite_result, indent=2)}

Your job:
- Summarize each available option as its own section, using its optionDescription.
- Clearly mark which option was elected and which are other available options.
- Within each section, organize In-Network (Individual, Family) and Out-of-Network (Individual, Family).
- Include details like deductibles, coinsurance, out-of-pocket maximums, etc.
- Do not display plan IDs in parentheses after the description.
- Do not display anything of the "No Coverage" option data in the response.
- Do not display that you asked to summarize.
- Use conversational, reader-friendly language and end with a call for further questions.
"""
    try:
        response = _bedrock.invoke_model(
            modelId=BEDROCK_MODEL_ID,
            contentType="application/json",
            accept="application/json",
            body=json.dumps({
                "anthropic_version": "bedrock-2023-05-31",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 1024,
                "temperature": 0.5
            })
        )
        body = json.loads(response['body'].read())
        return body['content'][0]['text']
    except Exception:
        log.exception("LLM summarization failed")
        return None

def wrap_response(status, body):
    return {
        "statusCode": status,
        "headers": {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "OPTIONS,POST"
        },
        "body": json.dumps(body)
    }

def invoke_fallback(event_payload):
    log.info("Invoking fallback lambda")
    try:
        resp = _lambda.invoke(
            FunctionName=FALLBACK_LAMBDA_NAME,
            InvocationType="RequestResponse",
            Payload=json.dumps(event_payload).encode()
        )
        return wrap_response(200, json.loads(resp['Payload'].read()))
    except Exception as e:
        log.exception("Fallback invocation failed")
        return wrap_response(500, {"error": f"Fallback error: {e}"})

def process_with_comprehend(text: str) -> str:
    """
    Uses AWS Comprehend to detect key phrases from the input text.
    Returns a concatenated string of key phrases.
    """
    if not text or not text.strip(): # Handle empty input gracefully
        return ""

    try:
        language_response = _comprehend.detect_dominant_language(Text=text)
        dominant_language_code = language_response['Languages'][0]['LanguageCode']
        log.info(f"Detected dominant language: {dominant_language_code}")

        response = _comprehend.detect_key_phrases(Text=text, LanguageCode=dominant_language_code)
        key_phrases = [phrase['Text'] for phrase in response['KeyPhrases']]
        log.info(f"Comprehend Key Phrases: {key_phrases}")
        # Join key phrases to form a single string for lookup
        # This will be passed to 'normalize' later.
        return " ".join(key_phrases)
    except Exception:
        log.exception("Comprehend NLP processing failed")
        # Fallback to original text if Comprehend fails, but normalize it for consistency
        return text # If Comprehend fails, we'll try to use the raw text

def save_chat_history(session_id: str, user_input: str, bot_response: str):
    """Saves the chat interaction to DynamoDB."""
    timestamp = int(time.time())
    created_at = datetime.now(timezone.utc).isoformat()
    try:
        _dynamodb_table.put_item(
            Item={
                'SessionId': session_id,
                'Timestamp': timestamp,
                'user_input': user_input,
                'bot_response': bot_response,
                'CreatedAt': created_at
            }
        )
        log.info(f"Chat history saved for session {session_id} at {timestamp}")
    except Exception:
        log.exception(f"Failed to save chat history for session {session_id}")

def get_chat_history(session_id: str, limit: int = 5) -> list:
    """Retrieves the most recent chat history for a given session ID."""
    try:
        response = _dynamodb_table.query(
            KeyConditionExpression='SessionId = :sid',
            ExpressionAttributeValues={
                ':sid': session_id
            },
            Limit=limit,
            ScanIndexForward=False
        )
        items = response.get('Items', [])
        sorted_items = sorted(items, key=lambda x: x.get('Timestamp', 0))
        log.info(f"Retrieved {len(sorted_items)} chat history items for session {session_id}")
        return sorted_items
    except Exception:
        log.exception(f"Failed to retrieve chat history for session {session_id}")
        return []

def lambda_handler(event, _context):
    log.info("Received event: %s", json.dumps(event))

    raw = event.get("body") or event.get("prompt") or "{}"
    if isinstance(raw, (bytes, bytearray)):
        raw = raw.decode()
    try:
        payload = json.loads(raw) if isinstance(raw, str) else raw
    except Exception:
        log.exception("Failed to parse JSON body")
        return wrap_response(400, {"error": "Invalid JSON in body"})

    session_id = payload.get("SessionId", "default-session")
    user_input_text = payload.get("inputText", "")

    chat_history = get_chat_history(session_id)
    log.info(f"Current chat history for {session_id}: {chat_history}")

    params = payload.get("parameters") or []
    if isinstance(params, dict):
        params = [{"name": k, "value": v} for k, v in params.items()]

    # Original condition from parameters or user_input_text
    original_condition = next((p["value"] for p in params if p["name"] == "condition"), user_input_text)
    
    # --- The key change: Process the original condition ONLY with Comprehend ---
    processed_condition = process_with_comprehend(original_condition)
    
    # If Comprehend returns empty (e.g., very short input, no key phrases detected),
    # fall back to using the original user input, then normalize it.
    if not processed_condition:
        log.warning(f"Comprehend returned empty key phrases for '{original_condition}', falling back to original text.")
        processed_condition = original_condition # Use original if Comprehend fails to find anything

    log.info(f"Final condition for lookup (after Comprehend/fallback): {processed_condition}")

    plans = [str(p["value"]).strip() for p in params if p["name"] == "plan"]

    available_options = payload.get("availableOptions", [])
    elected_option = payload.get("electedOption")

    if not original_condition and not user_input_text:
        return wrap_response(400, {"error": "Missing 'condition' parameter or 'inputText' in payload"})
    if not plans:
        return wrap_response(400, {"error": "Missing 'plan' parameter(s)"})

    plan_desc_map = {
        str(opt.get("optionId")): opt.get("optionDescription")
        for opt in available_options
    }
    if isinstance(elected_option, dict):
        plan_desc_map[str(elected_option.get("optionId"))] = elected_option.get("optionDescription")

    composite = []
    response_message = ""

    for plan in plans:
        desc = plan_desc_map.get(plan, "").strip()

        if desc.lower() == "no coverage":
            log.info(f"Skipping plan {plan} ('{desc}') due to no coverage")
            continue

        # Pass the Comprehend-processed string directly to get_plan_value
        status, data = get_plan_value(processed_condition, plan)
        if status != 200:
            log.warning(f"CSV lookup failed for plan {plan} with condition '{processed_condition}'. Status: {status}, Data: {data}")
            fallback_body = {
                "parameters": [
                    {"name": "condition",        "value": processed_condition}, # Pass processed condition
                    {"name": "optionDescription","value": desc or plan},
                    {"name": "populationType",  "value": payload.get("populationType")},
                    {"name": "userQuery",        "value": user_input_text}
                ],
                "availableOptions": available_options,
                "electedOption":    elected_option,
                "chatHistory":      chat_history
            }
            fallback_response = invoke_fallback({ "body": json.dumps(fallback_body) })
            if fallback_response['statusCode'] == 200:
                response_body = json.loads(fallback_response['body'])
                response_message = response_body.get('message', json.dumps(response_body))
                save_chat_history(session_id, user_input_text, response_message)
                return fallback_response
            else:
                log.error("Fallback lambda invocation failed or returned non-200 status.")
                save_chat_history(session_id, user_input_text, "Error: Unable to retrieve information.")
                return fallback_response

        composite.append({
            "optionId":            plan,
            "optionDescription": desc,
            "data":                data
        })

    if not composite:
        response_message = "No applicable plans to process based on your query or elected options."
        save_chat_history(session_id, user_input_text, response_message)
        return wrap_response(200, {"message": response_message, "results": []})

    summary = summarize_with_claude35(composite, available_options, elected_option)
    response_message = summary if summary else "I couldn't generate a summary at this time, but here are the raw details."

    save_chat_history(session_id, user_input_text, response_message)

    return wrap_response(200, {
        "message":          response_message,
        "availableOptions": available_options,
        "electedOption":    elected_option,
        "results":          composite
    })
