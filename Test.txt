import json
import boto3
from botocore.config import Config
import traceback

bedrock_agent = boto3.client(
    'bedrock-agent-runtime',
    region_name='us-east-1',
    config=Config(read_timeout=45)
 
def lambda_handler(event, context):
    try:
        # Original input parsing (unchanged)
        body = json.loads(event.get('body', '{}'))
        user_input = body.get('message') or body.get('prompt')
        session_id = body.get('sessionId', context.aws_request_id)

        # 1. Changed: Yield initial headers instead of return
        yield {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'text/plain',  # 2. Changed from JSON
                'Access-Control-Allow-Origin': '*'
            }
        }

        response = bedrock_agent.invoke_agent(
            agentId='YOUR_ID',
            agentAliasId='YOUR_ALIAS',
            sessionId=session_id,
            inputText=user_input
        )

        # 3. Changed: Stream raw chunks instead of building completion
        for event in response['completion']:
            chunk = event['chunk']['bytes'].decode('utf-8')
            # 4. Changed: Yield raw text chunks
            yield {'body': chunk}

    except Exception as e:
        # 5. Changed: Stream error instead of returning JSON
        yield {'body': f"\nERROR: {str(e)}"}



//Javascript Basic streaming consumer
async function askQuestion(question) {
  const response = await fetch(LAMBDA_URL, {
    method: 'POST',
    body: JSON.stringify({ message: question })
  });
  
  const reader = response.body.getReader();
  const decoder = new TextDecoder();
  
  while(true) {
    const { done, value } = await reader.read();
    if(done) break;
    console.log(decoder.decode(value));
  }
}
//HTML
<!DOCTYPE html>
<html>
<body>
    <input type="text" id="questionInput" placeholder="Ask something...">
    <button onclick="askQuestion()">Ask</button>
    <div id="responseArea" style="white-space: pre-wrap;"></div>

<script>
async function askQuestion() {
    const question = document.getElementById('questionInput').value;
    const responseArea = document.getElementById('responseArea');
    responseArea.textContent = ''; // Clear previous response
    
    try {
        const response = await fetch('YOUR_LAMBDA_FUNCTION_URL', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: question })
        });

        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        
        while(true) {
            const { done, value } = await reader.read();
            if(done) break;
            
            // Append each chunk to the display
            responseArea.textContent += decoder.decode(value);
            
            // Optional: Auto-scroll to bottom
            responseArea.scrollTop = responseArea.scrollHeight;
        }
    } catch (error) {
        responseArea.textContent += '\nError: ' + error.message;
    }
}
</script>
</body>
</html>
