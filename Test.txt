```python
import boto3
import os
import sys
import argparse
from botocore.exceptions import NoCredentialsError, PartialCredentialsError

# Ensure AWS credentials are configured via one of:
#   Environment variables, AWS CLI (aws configure), or ~/.aws/credentials

def get_comprehend_client():
    """Returns an authenticated Amazon Comprehend client, handling missing credentials."""
    session = boto3.Session()
    creds = session.get_credentials()
    region = session.region_name or os.environ.get('AWS_DEFAULT_REGION')
    if not creds or not creds.access_key or not creds.secret_key:
        print("ERROR: AWS credentials not found. Configure via AWS CLI or environment variables.")
        sys.exit(1)
    if not region:
        print("ERROR: AWS region not set. Set AWS_DEFAULT_REGION or configure ~/.aws/config.")
        sys.exit(1)
    try:
        client = session.client('comprehend', region_name=region)
        client.list_key_phrases_detection_jobs(MaxResults=1)
        return client
    except (NoCredentialsError, PartialCredentialsError):
        print("ERROR: Invalid AWS credentials. Check your configuration.")
        sys.exit(1)
    except Exception as e:
        print(f"ERROR: Failed to create Comprehend client: {e}")
        sys.exit(1)


def merge_phrases(phrases, text):
    """Merge overlapping or adjacent key phrases into continuous spans."""
    phrases = sorted(phrases, key=lambda x: x['BeginOffset'])
    merged = []
    for ph in phrases:
        if not merged:
            merged.append(ph.copy())
            continue
        last = merged[-1]
        if ph['BeginOffset'] <= last['EndOffset'] + 1:
            last['EndOffset'] = max(last['EndOffset'], ph['EndOffset'])
            last['Score'] = (last['Score'] + ph['Score']) / 2
            last['Text'] = text[last['BeginOffset']:last['EndOffset']]
        else:
            merged.append(ph.copy())
    return [(p['Text'], p['Score']) for p in merged]


def detect_key_phrases(client, text, language_code='en', min_score=0.0):
    """Detect key phrases and merge adjacent ones, filtering by confidence."""
    resp = client.detect_key_phrases(Text=text, LanguageCode=language_code)
    raw = resp.get('KeyPhrases', [])
    filtered = [p for p in raw if p['Score'] >= min_score]
    return merge_phrases(filtered, text) if filtered else []


def parse_args():
    parser = argparse.ArgumentParser(
        description="Detect merged key phrases via Amazon Comprehend."
    )
    parser.add_argument(
        'text', nargs='*', help="Text to analyze (or use -f/--file for multiple inputs)"
    )
    parser.add_argument(
        '-f', '--file', type=argparse.FileType('r'),
        help="Path to text file (one input per line)"
    )
    parser.add_argument(
        '-l', '--language', default='en',
        help="Language code (default 'en')"
    )
    parser.add_argument(
        '-s', '--min-score', type=float, default=0.0,
        help="Minimum confidence score (0.0-1.0)"
    )
    args = parser.parse_args()

    # Determine inputs: file > positional text > interactive prompt
    if args.file:
        inputs = [line.strip() for line in args.file if line.strip()]
    elif args.text:
        inputs = [' '.join(args.text)]
    else:
        # Interactive fallback
        user_input = input("Enter text to analyze for key phrases: ")
        if not user_input.strip():
            print("No text provided. Exiting.")
            sys.exit(0)
        inputs = [user_input]

    return inputs, args.language, args.min_score


def main():
    inputs, language, min_score = parse_args()
    client = get_comprehend_client()
    for text in inputs:
        print(f"\nAnalyzing: {text}\n")
        phrases = detect_key_phrases(client, text,
                                     language_code=language,
                                     min_score=min_score)
        if phrases:
            print("Detected Merged Key Phrases:")
            for ph, score in phrases:
                print(f" - {ph} (Score: {score:.2f})")
        else:
            print("No key phrases detected above threshold.")

if __name__ == '__main__':
    main()
```
